==============================
How to use 2-matrix_divided.py
==============================

------------
Description:
------------
    This module contains a function that takes two arguments.

    Syntax:
        matrix_divided(matrix, div)

    Args:
        matrix: a list of lists containing integers or floats
        div: an integer or float

    The function divides each number containined within the matrix by div 
    and returns a new matrix with the qoutients

    First add the module:
        >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

    ---------------------------------------
    usage/constraints for matrix parameter:
    ---------------------------------------

        an empty list:
            >>> matrix_divided([], 3)
            Traceback (most recent call last):
        	    ...
            TypeError: matrix must be a matrix (list of lists) of integers/floats

        a list containing a single list:
            >>> matrix_divided([1, 2, 3], 4.5)
            Traceback (most recent call last):
	            ...
            TypeError: matrix must be a matrix (list of lists) of integers/floats

        a list of lists with integers:
            >>> matrix_divided([[1, 2], [1, 3]], 2)
            [[0.5, 1.0], [0.5, 1.5]]

        a list containing 3 lists:
            >>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
            [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]


        a list containing random data types:
            >>> matrix_divided([[1, 2], "Hello"], 2)
            Traceback (most recent call last):
        	    ...
            TypeError: matrix must be a matrix (list of lists) of integers/floats

        a list of lists with different data types, a tuple, float, int and string:
            >>> matrix_divided([[2.4, "Hi"], [(1, 2), 5]], 3)
            Traceback (most recent call last):
	            ...
            TypeError: matrix must be a matrix (list of lists) of integers/floats

        if one of the elements in the list of lists is equal to "NaN":
            >>> matrix_divided([[1, 2, 3], ["NaN", 5, 6]], 3)
            Traceback (most recent call last):
	            ...
            ValueError: cannot convert float NaN to integer

        Float over flow:
            >>> matrix_divided([[1, 2, 3.8e789], [4, 5, 6]], 3)
            Traceback (most recent call last):
	            ...
            OverflowError: cannot convert float infinity to integer

    --------------------------------------
    usage/constraints for 'div' parameter:
    --------------------------------------

        'div' must be an integer or a float:
            >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
            [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
            >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3.8)
            [[0.27, 0.52, 0.79], [1.06, 1.31, 1.58]]

        'div' cannot be equal to zero:
            >>> matrix_divided([[1, 2], [1, 2.5]], 0)
            Traceback (most recent call last):
	            ...
            ZeroDivisionError: division by zero

        'div' must be an integer or float:
            >>> matrix_divided([[1, 4.5], [2.3, 2], [1.3, 3.5]], "Hi")
            Traceback (most recent call last):
	            ...
            TypeError: div must be a number

        if div == "NaN":
            >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float("NaN"))
            Traceback (most recent call last):
	            ...
            ValueError: cannot convert float NaN to integer

        Float over flow:
            >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3.8e789)
            Traceback (most recent call last):
	            ...
            OverflowError: cannot convert float infinity to integer


    ---------------
    Results/Return:
    ---------------
        the result of the division is rounded to 2 decimal places:
            >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3.8)
            [[0.27, 0.52, 0.79], [1.06, 1.31, 1.58]]

        return a new matrix storing the quotient of all divisions   
